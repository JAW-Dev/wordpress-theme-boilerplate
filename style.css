/*
Theme Name: Theme_Name
Theme URI: Theme_URI
Author: Theme_Author
Author URI: Theme_Author_URL
Description: Theme_Description
Version: 1.0.0
License: GNU General Public License v2 or later
License URI: http://www.gnu.org/licenses/gpl-2.0.html
Text Domain: Theme_Textdomain
Tags: custom
*/
html {
  font-family: sans-serif;
  line-height: 1.15;
  -ms-text-size-adjust: 100%;
  -webkit-text-size-adjust: 100%;
}

body {
  margin: 0;
}

article,
aside,
details,
figcaption,
figure,
footer,
header,
main,
menu,
nav,
section,
summary {
  display: block;
}

audio,
canvas,
progress,
video {
  display: inline-block;
}

audio:not([controls]) {
  display: none;
  height: 0;
}

progress {
  vertical-align: baseline;
}

template,
[hidden] {
  display: none;
}

a {
  background-color: transparent;
  -webkit-text-decoration-skip: objects;
}

a:active,
a:hover {
  outline-width: 0;
}

abbr[title] {
  border-bottom: none;
  text-decoration: underline;
  -webkit-text-decoration: underline dotted;
          text-decoration: underline dotted;
}

b,
strong {
  font-weight: inherit;
}

b,
strong {
  font-weight: bolder;
}

dfn {
  font-style: italic;
}

h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

mark {
  background-color: #ff0;
  color: #000;
}

small {
  font-size: 80%;
}

sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sub {
  bottom: -0.25em;
}

sup {
  top: -0.5em;
}

img {
  border-style: none;
}

svg:not(:root) {
  overflow: hidden;
}

code,
kbd,
pre,
samp {
  font-family: monospace, monospace;
  font-size: 1em;
}

figure {
  margin: 1em 40px;
}

hr {
  -webkit-box-sizing: content-box;
          box-sizing: content-box;
  height: 0;
  overflow: visible;
}

button,
input,
optgroup,
select,
textarea {
  font: inherit;
  margin: 0;
}

optgroup {
  font-weight: bold;
}

button,
input {
  overflow: visible;
}

button,
select {
  text-transform: none;
}

button,
html [type="button"],
[type="reset"],
[type="submit"] {
  -webkit-appearance: button;
}

button::-moz-focus-inner,
[type="button"]::-moz-focus-inner,
[type="reset"]::-moz-focus-inner,
[type="submit"]::-moz-focus-inner {
  border-style: none;
  padding: 0;
}

button:-moz-focusring,
[type="button"]:-moz-focusring,
[type="reset"]:-moz-focusring,
[type="submit"]:-moz-focusring {
  outline: 1px dotted ButtonText;
}

fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

legend {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  color: inherit;
  display: table;
  max-width: 100%;
  padding: 0;
  white-space: normal;
}

textarea {
  overflow: auto;
}

[type="checkbox"],
[type="radio"] {
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  padding: 0;
}

[type="number"]::-webkit-inner-spin-button,
[type="number"]::-webkit-outer-spin-button {
  height: auto;
}

[type="search"] {
  outline-offset: -2px;
  -webkit-appearance: textfield;
}

[type="search"]::-webkit-search-cancel-button,
[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-input-placeholder {
  color: inherit;
  opacity: 0.54;
}

::-webkit-file-upload-button {
  font: inherit;
  -webkit-appearance: button;
}

html {
  -moz-font-feature-settings: 'liga', 'kern';
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  position: relative;
  background-color: #E6E6E6;
  color: #2E2E2E;
  font-size: 16px;
}

body {
  position: relative;
}

.screen-reader-text {
  clip: rect(1px, 1px, 1px, 1px);
  height: rem(1px);
  overflow: hidden;
  position: absolute;
  width: rem(1px);
}

.screen-reader-text:focus {
  font-size: 0.875;
  font-size: rem(0.875);
  background-color: #E6E6E6;
  -webkit-box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
          box-shadow: 0 0 2px 2px rgba(0, 0, 0, 0.6);
  clip: auto;
  color: #8A8A8A;
  display: block;
  font-weight: bold;
  height: auto;
  left: 5px;
  line-height: normal;
  padding: rem(15px) rem(23px) rem(14px);
  text-decoration: none;
  top: 5px;
  width: auto;
  z-index: 100000;
}

.alignleft {
  display: inline;
  float: left;
  margin: 0 rem(24) 0 0;
}

.alignright {
  display: inline;
  float: right;
  margin: 0 0 0 rem(24);
}

.aligncenter {
  display: block;
  margin-left: auto;
  margin-right: auto;
}

.clear::before, .clear::after {
  content: "";
  display: table;
}

.clear::after {
  clear: both;
}

embed,
iframe,
object {
  max-width: 100%;
}

hr {
  background-color: #8A8A8A;
  border: none;
  height: 1px;
  margin: 0 0 rem(24) 0;
  width: auto;
}

figure {
  margin: 0;
}

ul,
ol {
  margin: 0 0 rem(24) rem(24);
}

ul {
  list-style: disc;
}

ol {
  list-style: decimal;
}

li > ul,
li > ol {
  margin: 0 0 0 rem(24);
}

dt {
  font-weight: 700;
}

dd {
  margin: 0 rem(24) rem(24) 0;
}

table {
  height: auto;
  margin: 0 0 rem(24) 0;
  width: 100%;
}

th {
  font-weight: 700;
}

.wp-video {
  display: block;
  float: none;
  overflow: hidden;
}

img {
  height: auto;
  max-width: 100%;
}

.wp-caption {
  margin: 0 0 rem(24) 0;
  max-width: 100%;
}

.wp-caption img[class*="wp-image-"] {
  display: block;
  margin: 0 auto;
}

.wp-caption.aligncenter {
  margin: 0 auto rem(24) auto;
}

.wp-caption.alignleft {
  margin-right: rem(24);
}

.wp-caption.alignright {
  margin-left: rem(24);
}

.wp-caption .wp-caption-text {
  font-style: italic;
  line-height: 1.2;
  margin: rem(6) 0 0;
  text-align: center;
}

.wp-caption-text {
  text-align: center;
}

.fluid-embed {
  height: 0;
  overflow: hidden;
  padding-bottom: 56.25%;
  position: relative;
}

@media (max-width: 768px) {
  .fluid-embed {
    padding-bottom: calc(56.25% - 2.1875rem);
  }
}

.fluid-embed embed,
.fluid-embed object,
.fluid-embed iframe {
  height: 100%;
  left: 0;
  position: absolute;
  top: 0;
  width: 100%;
}

.image-as-background {
  background-position: center center;
  background-repeat: no-repeat;
  background-size: cover;
}

.video-as-background {
  display: block;
  height: 100%;
  -o-object-fit: cover;
     object-fit: cover;
  -o-object-position: center top;
     object-position: center top;
  position: absolute;
  width: 100%;
  z-index: 1;
}

body,
button,
input,
select,
textarea {
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
}

h1,
.h1,
h2,
.h2,
h3,
.h3,
h4,
.h4,
h5,
.h5,
h6,
.h6 {
  margin-top: 0;
}

p {
  margin: 0 0 rem(24) 0;
}

b,
strong {
  font-weight: 700;
}

dfn,
cite,
em,
i {
  font-style: italic;
}

blockquote,
q {
  margin: 0 rem(24);
  quotes: "" "";
}

blockquote::before, blockquote::after,
q::before,
q::after {
  content: "";
}

address {
  margin: 0 0 rem(24) 0;
}

pre {
  font-family: "Courier 10 Pitch", Courier, monospace;
  font-size: rem(15);
  line-height: 1.725;
  margin: 0 0 rem(24);
  max-width: 100%;
  overflow: auto;
  padding: rem(24);
}

code,
kbd,
tt,
var {
  font-family: Monaco, Consolas, "DejaVu Sans Mono", monospace;
  font-size: rem(15);
}

abbr,
acronym {
  border-bottom: 1px dotted #5C5C5C;
  cursor: help;
}

mark,
ins {
  text-decoration: none;
}

sup,
sub {
  font-size: 75%;
  height: 0;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  bottom: 1ex;
}

sub {
  top: 0.5ex;
}

small {
  font-size: 75%;
}

big {
  font-size: 125%;
}

@media screen and (max-width: 600px) {
  #wpadminbar {
    position: fixed;
  }
}

.row::after {
  clear: both;
  content: "";
  display: table;
  margin: 0;
}

div[class^="col"] {
  float: left;
  margin-left: 0.5rem;
  margin-right: 0.5rem;
}

div[class^="col"]:last-of-type {
  margin-right: 0;
}

.col-1 {
  width: calc(((100% / 12) * 12) - 1rem);
}

.col-2 {
  width: calc(((100% / 12) * 6) - 1rem);
}

.col-3 {
  width: calc(((100% / 12) * 4) - 1rem);
}

.col-4 {
  width: calc(((100% / 12) * 3) - 1rem);
}

.col-5 {
  width: calc(((100% / 12) * 2.4) - 1rem);
}

.col-6 {
  width: calc(((100% / 12) * 2) - 1rem);
}

.col-7 {
  width: calc(((100% / 12) * 1.7141) - 1rem);
}

.col-8 {
  width: calc(((100% / 12) * 1.5) - 1rem);
}

.col-9 {
  width: calc(((100% / 12) * 1.3333) - 1rem);
}

.col-10 {
  width: calc(((100% / 12) * 1.2) - 1rem);
}

.col-11 {
  width: calc(((100% / 12) * 1.091) - 1rem);
}

.col-12 {
  width: calc(((100% / 12) * 1) - 1rem);
}

@media (min-width: 1025px) and (max-width: 1200px) {
  .col-12,
  .col-11 {
    width: calc(((100% / 12) * 12) - 1rem);
  }
}

@media (min-width: 769px) and (max-width: 1024px) {
  .col-12,
  .col-11,
  .col-10,
  .col-9 {
    width: calc(((100% / 12) * 12) - 1rem);
  }
}

@media (min-width: 641px) and (max-width: 768px) {
  .col-12,
  .col-11,
  .col-10,
  .col-9,
  .col-8,
  .col-7 {
    width: calc(((100% / 12) * 12) - 1rem);
  }
}

@media (min-width: 426px) and (max-width: 640px) {
  .col-12,
  .col-11,
  .col-10,
  .col-9,
  .col-8,
  .col-7,
  .col-6,
  .col-5 {
    width: calc(((100% / 12) * 12) - 1rem);
  }
}

@media (min-width: 321px) and (max-width: 425px) {
  .col-12,
  .col-11,
  .col-10,
  .col-9,
  .col-8,
  .col-7,
  .col-6,
  .col-5,
  .col-4 {
    width: calc(((100% / 12) * 12) - 1rem);
  }
}

@media (min-width: 0) and (max-width: 320px) {
  .col-12,
  .col-11,
  .col-10,
  .col-9,
  .col-8,
  .col-7,
  .col-6,
  .col-5,
  .col-4,
  .col-3,
  .col-2 {
    width: calc(((100% / 12) * 12) - 1rem);
  }
}

@supports (flex-wrap: wrap) {
  .row {
    display: -webkit-box;
    display: -ms-flexbox;
    display: flex;
    -webkit-box-orient: horizontal;
    -webkit-box-direction: normal;
        -ms-flex-direction: row;
            flex-direction: row;
    -ms-flex-wrap: wrap;
        flex-wrap: wrap;
    margin: 0;
    overflow: visible;
  }
  div[class^="col"] {
    float: none;
    margin-left: 0.5rem;
    margin-right: 0.5rem;
  }
  div[class^="col"]:last-of-type {
    margin-right: 0;
  }
  .col-1 {
    width: calc(((100% / 12) * 12) - 1rem);
  }
  .col-2 {
    width: calc(((100% / 12) * 6) - 1rem);
  }
  .col-3 {
    width: calc(((100% / 12) * 4) - 1rem);
  }
  .col-4 {
    width: calc(((100% / 12) * 3) - 1rem);
  }
  .col-5 {
    width: calc(((100% / 12) * 2.4) - 1rem);
  }
  .col-6 {
    width: calc(((100% / 12) * 2) - 1rem);
  }
  .col-7 {
    width: calc(((100% / 12) * 1.7141) - 1rem);
  }
  .col-8 {
    width: calc(((100% / 12) * 1.5) - 1rem);
  }
  .col-9 {
    width: calc(((100% / 12) * 1.3333) - 1rem);
  }
  .col-10 {
    width: calc(((100% / 12) * 1.2) - 1rem);
  }
  .col-11 {
    width: calc(((100% / 12) * 1.091) - 1rem);
  }
  .col-12 {
    width: calc(((100% / 12) * 1) - 1rem);
  }
  @media (min-width: 1025px) and (max-width: 1200px) {
    .col-12,
    .col-11 {
      width: calc(((100% / 12) * 12) - 1rem);
    }
  }
  @media (min-width: 769px) and (max-width: 1024px) {
    .col-12,
    .col-11,
    .col-10,
    .col-9 {
      width: calc(((100% / 12) * 12) - 1rem);
    }
  }
  @media (min-width: 641px) and (max-width: 768px) {
    .col-12,
    .col-11,
    .col-10,
    .col-9,
    .col-8,
    .col-7 {
      width: calc(((100% / 12) * 12) - 1rem);
    }
  }
  @media (min-width: 426px) and (max-width: 640px) {
    .col-12,
    .col-11,
    .col-10,
    .col-9,
    .col-8,
    .col-7,
    .col-6,
    .col-5 {
      width: calc(((100% / 12) * 12) - 1rem);
    }
  }
  @media (min-width: 321px) and (max-width: 425px) {
    .col-12,
    .col-11,
    .col-10,
    .col-9,
    .col-8,
    .col-7,
    .col-6,
    .col-5,
    .col-4 {
      width: calc(((100% / 12) * 12) - 1rem);
    }
  }
  @media (min-width: 0) and (max-width: 320px) {
    .col-12,
    .col-11,
    .col-10,
    .col-9,
    .col-8,
    .col-7,
    .col-6,
    .col-5,
    .col-4,
    .col-3,
    .col-2 {
      width: calc(((100% / 12) * 12) - 1rem);
    }
  }
}

@supports (grid-area: auto) {
  .row {
    display: grid;
    grid-column-gap: 1rem;
    margin-left: 0.5rem;
    margin-right: 0.5rem;
  }
  div[class^="col"] {
    float: none;
    margin-left: 0;
    margin-right: 0;
  }
  .grid-1 {
    grid-template-columns: repeat(1, 1fr);
  }
  .grid-2 {
    grid-template-columns: repeat(2, 2fr);
  }
  .grid-3 {
    grid-template-columns: repeat(3, 3fr);
  }
  .grid-4 {
    grid-template-columns: repeat(4, 4fr);
  }
  .grid-5 {
    grid-template-columns: repeat(5, 5fr);
  }
  .grid-6 {
    grid-template-columns: repeat(6, 6fr);
  }
  .grid-7 {
    grid-template-columns: repeat(7, 7fr);
  }
  .grid-8 {
    grid-template-columns: repeat(8, 8fr);
  }
  .grid-9 {
    grid-template-columns: repeat(9, 9fr);
  }
  .grid-10 {
    grid-template-columns: repeat(10, 10fr);
  }
  .grid-11 {
    grid-template-columns: repeat(11, 11fr);
  }
  .grid-12 {
    grid-template-columns: repeat(12, 12fr);
  }
  .col-1 {
    width: auto;
  }
  .col-2 {
    width: auto;
  }
  .col-3 {
    width: auto;
  }
  .col-4 {
    width: auto;
  }
  .col-5 {
    width: auto;
  }
  .col-6 {
    width: auto;
  }
  .col-7 {
    width: auto;
  }
  .col-8 {
    width: auto;
  }
  .col-9 {
    width: auto;
  }
  .col-10 {
    width: auto;
  }
  .col-11 {
    width: auto;
  }
  .col-12 {
    width: auto;
  }
  @media (min-width: 1025px) and (max-width: 1200px) {
    .grid-12,
    .grid-11 {
      grid-template-columns: 1fr;
    }
  }
  @media (min-width: 769px) and (max-width: 1024px) {
    .grid-12,
    .grid-11,
    .grid-10,
    .grid-9 {
      grid-template-columns: 1fr;
    }
  }
  @media (min-width: 641px) and (max-width: 768px) {
    .grid-12,
    .grid-11,
    .grid-10,
    .grid-9,
    .grid-8,
    .grid-7 {
      grid-template-columns: 1fr;
    }
  }
  @media (min-width: 426px) and (max-width: 640px) {
    .grid-12,
    .grid-11,
    .grid-10,
    .grid-9,
    .grid-8,
    .grid-7,
    .grid-6,
    .grid-5 {
      grid-template-columns: 1fr;
    }
  }
  @media (min-width: 321px) and (max-width: 425px) {
    .grid-12,
    .grid-11,
    .grid-10,
    .grid-9,
    .grid-8,
    .grid-7,
    .grid-6,
    .grid-5,
    .grid-4 {
      grid-template-columns: 1fr;
    }
  }
  @media (min-width: 0) and (max-width: 320px) {
    .grid-12,
    .grid-11,
    .grid-10,
    .grid-9,
    .grid-8,
    .grid-7,
    .grid-6,
    .grid-5,
    .grid-4,
    .grid-3,
    .grid-2 {
      grid-template-columns: 1fr;
    }
  }
}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
